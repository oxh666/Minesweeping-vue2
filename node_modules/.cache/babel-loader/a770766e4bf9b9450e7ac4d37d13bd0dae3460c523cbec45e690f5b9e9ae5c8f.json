{"ast":null,"code":"// import MineClearing from './components/Index.vue'\n\n/**\n * @description 九宫格数组其中除开点击的[0,0]坐标以外的八个格子\n * @type {number[][]}\n */\nconst posArr = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\nexport default {\n  name: 'App',\n  components: {\n    // MineClearing\n  },\n  data() {\n    return {\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      posArr,\n      isGameOver: false,\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      isFirstClick: true,\n      /**\n       * @description 格子数组\n       */\n      minesArray: [],\n      /**\n       * @description 行数\n       */\n      rowSize: 8,\n      /**\n       * @description 列数\n       */\n      colSize: 8,\n      /**\n       * @description 地雷数量\n       */\n      mineSize: 9,\n      /**\n       * @description 表情包\n       */\n      btnContent: 'emoji-smile',\n      /**\n       * @description 数字显示隐藏\n       */\n      visited: ''\n    };\n  },\n  created() {\n    // 定义扫雷游戏难度 默认为普通\n  },\n  watch: {},\n  mounted() {\n    // 初始化游戏\n    console.log('-----------------------');\n    console.log('初始化游戏中...');\n    this.minesArray = [];\n    for (let row = 0; row < this.rowSize; row++) {\n      this.minesArray[row] = [];\n      this.visited[row] = [];\n      for (let col = 0; col < this.colSize; col++) {\n        this.minesArray[row][col] = 0;\n        this.visited[row][col] = false;\n      }\n    }\n    console.log('游戏初始化完成');\n    console.log('-----------------------');\n  },\n  methods: {\n    restart() {\n      console.log('重新开始');\n    },\n    /**\n     * @description 第一次点击格子\n     * @param row 第一次点击的X坐标\n     * @param col 第一次点击的Y坐标\n     */\n    clickCell(row, col) {\n      if (this.isFirstClick) {\n        this.initMines(row, col);\n      }\n    },\n    /**\n     * @description  传入第一次点击的坐标\n     * @param row 第一次点击的X坐标\n     * @param col 第一次点击的Y坐标\n     */\n    initMines(row, col) {\n      console.log('-----------------------');\n      console.log('初始化地雷...');\n\n      // 地雷设为 -1\n      for (let i = 0; i < this.mineSize; i++) {\n        do {\n          // 生成行/列随机数\n\n          /**\n           * @des 雷X坐标\n           * @type {number}\n           */\n          var mineRow = Math.floor(Math.random() * this.rowSize);\n          /**\n           * @des 雷Y坐标\n           * @type {number}\n           */\n          var mineCol = Math.floor(Math.random() * this.colSize);\n        } while (\n        //  防止与第一次点击坐标重复\n        mineRow === row && mineCol === col ||\n        //  防止地雷坐标重复\n        this.minesArray[mineRow][mineCol] === -1);\n        console.log('点击地雷随机生成的坐标', mineRow, ',', mineCol);\n        this.minesArray[mineRow][mineCol] = -1;\n        this.$set(this.minesArray, mineRow, [...this.minesArray[mineRow]]);\n      }\n      // 初始化数字\n      this.initNum();\n      console.log('初始化地雷完成...');\n      console.log('-----------------------');\n      this.isFirstClick = false;\n    },\n    /**\n     * @description 初始化数字\n     */\n    initNum() {\n      console.log('初始化数字...');\n      /**\n       * @description X格长度\n       * @type {number}\n       */\n      const borderX = this.minesArray.length;\n\n      /**\n       * @description Y格长度\n       * @type {number}\n       */\n      const borderY = this.minesArray[0].length;\n      for (let row = 0; row < this.minesArray.length; row++) {\n        for (let col = 0; col < this.minesArray[row].length; col++) {\n          // 如果是雷，雷周围 8 个格子除了地雷数字加 1\n          if (this.minesArray[row][col] === -1) {\n            posArr.forEach(pos => {\n              console.log('pos', pos);\n              console.log('row', row);\n              console.log('col', col);\n              // X=其余8个格子X坐标+随机生成的地雷X坐标\n              const x = pos[0] + row;\n              // Y=其余8个格子Y坐标+随机生成的地雷Y坐标\n              const y = pos[1] + col;\n              if (x < borderX && x >= 0 && y < borderY && y >= 0) {\n                if (this.minesArray[x][y] !== -1) {\n                  this.minesArray[x][y]++;\n                }\n              }\n            });\n          }\n        }\n      }\n    }\n  },\n  filters: {\n    timeFilter(val) {\n      return Number(val).toFixed(1);\n    },\n    /**\n     * @description 消除数字0\n     * @param val 格子数字\n     * @returns {string|*}\n     */\n    cellFilter(val) {\n      return val === 0 ? '' : val;\n    }\n  }\n};","map":{"version":3,"mappings":"AAoBA;;AAEA;AACA;AACA;AACA;AACA,gBACA,UACA,SACA,SACA,QACA,QACA,QACA,SACA,QACA;AACA;EACAA;EACAC;IACA;EAAA,CACA;EACAC;IACA;MAEA;AACA;AACA;MACAC;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;IAEA;EACA;EACAC;IACA;EAAA,CACA;EACAC;EACAC;IACA;IACAC;IACAA;IACA;IACA;MACA;MACA;MACA;QACA;QACA;MACA;IACA;IAEAA;IACAA;EACA;EACAC;IACAC;MACAF;IACA;IAEA;AACA;AACA;AACA;AACA;IACAG;MACA;QACA;MACA;IACA;IAEA;AACA;AACA;AACA;AACA;IACAC;MACAJ;MACAA;;MAEA;MACA;QACA;UACA;;UAEA;AACA;AACA;AACA;UACA;UACA;AACA;AACA;AACA;UACA;QACA;QACA;QACAK;QACA;QACA;QAEAL;QACA;QACA;MACA;MACA;MACA;MAEAA;MACAA;MAEA;IACA;IAEA;AACA;AACA;IACAM;MACAN;MACA;AACA;AACA;AACA;MACA;;MAEA;AACA;AACA;AACA;MACA;MAEA;QACA;UACA;UACA;YACAZ;cACAY;cACAA;cACAA;cACA;cACA;cACA;cACA;cACA;gBACA;kBACA;gBACA;cACA;YACA;UACA;QACA;MACA;IACA;EAEA;EACAO;IACAC;MACA;IACA;IAEA;AACA;AACA;AACA;AACA;IACAC;MACA;IACA;EACA;AAEA","names":["name","components","data","posArr","isGameOver","isFirstClick","minesArray","rowSize","colSize","mineSize","btnContent","visited","created","watch","mounted","console","methods","restart","clickCell","initMines","mineRow","initNum","filters","timeFilter","cellFilter"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"main-area\">\n      <button @click=\"restart\">{{ btnContent }}</button>\n      <div class=\"game-area\">\n        <div v-for=\"(row,m) in minesArray\" :key=\"m\" class=\"row-cells\">\n          <div v-for=\"(cell,n) in row\" :key=\"n\" class=\"cell\" @click=\"clickCell(m,n)\">\n\n            <div :class=\"['num-color-'+minesArray[m][n], 'num-color', ]\">\n              {{ cell | cellFilter}}\n            </div>\n            <div :class=\"['mask', {visited: visited[m][n]}]\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// import MineClearing from './components/Index.vue'\n\n/**\n * @description 九宫格数组其中除开点击的[0,0]坐标以外的八个格子\n * @type {number[][]}\n */\nconst posArr = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1]\n]\nexport default {\n  name: 'App',\n  components: {\n    // MineClearing\n  },\n  data () {\n    return {\n\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      posArr,\n      isGameOver: false,\n\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      isFirstClick: true,\n\n      /**\n       * @description 格子数组\n       */\n      minesArray: [],\n\n      /**\n       * @description 行数\n       */\n      rowSize: 8,\n\n      /**\n       * @description 列数\n       */\n      colSize: 8,\n\n      /**\n       * @description 地雷数量\n       */\n      mineSize: 9,\n\n      /**\n       * @description 表情包\n       */\n      btnContent: 'emoji-smile',\n\n      /**\n       * @description 数字显示隐藏\n       */\n      visited: ''\n\n    }\n  },\n  created () {\n    // 定义扫雷游戏难度 默认为普通\n  },\n  watch: {},\n  mounted () {\n    // 初始化游戏\n    console.log('-----------------------')\n    console.log('初始化游戏中...')\n    this.minesArray = []\n    for (let row = 0; row < this.rowSize; row++) {\n      this.minesArray[row] = []\n      this.visited[row] = []\n      for (let col = 0; col < this.colSize; col++) {\n        this.minesArray[row][col] = 0\n        this.visited[row][col] = false\n      }\n    }\n\n    console.log('游戏初始化完成')\n    console.log('-----------------------')\n  },\n  methods: {\n    restart () {\n      console.log('重新开始')\n    },\n\n    /**\n     * @description 第一次点击格子\n     * @param row 第一次点击的X坐标\n     * @param col 第一次点击的Y坐标\n     */\n    clickCell (row, col) {\n      if (this.isFirstClick) {\n        this.initMines(row, col)\n      }\n    },\n\n    /**\n     * @description  传入第一次点击的坐标\n     * @param row 第一次点击的X坐标\n     * @param col 第一次点击的Y坐标\n     */\n    initMines (row, col) {\n      console.log('-----------------------')\n      console.log('初始化地雷...')\n\n      // 地雷设为 -1\n      for (let i = 0; i < this.mineSize; i++) {\n        do {\n          // 生成行/列随机数\n\n          /**\n           * @des 雷X坐标\n           * @type {number}\n           */\n          var mineRow = Math.floor(Math.random() * this.rowSize)\n          /**\n           * @des 雷Y坐标\n           * @type {number}\n           */\n          var mineCol = Math.floor(Math.random() * this.colSize)\n        } while (\n          //  防止与第一次点击坐标重复\n          (mineRow === row && mineCol === col) ||\n        //  防止地雷坐标重复\n        this.minesArray[mineRow][mineCol] === -1)\n\n        console.log('点击地雷随机生成的坐标', mineRow, ',', mineCol)\n        this.minesArray[mineRow][mineCol] = -1\n        this.$set(this.minesArray, mineRow, [...this.minesArray[mineRow]])\n      }\n      // 初始化数字\n      this.initNum()\n\n      console.log('初始化地雷完成...')\n      console.log('-----------------------')\n\n      this.isFirstClick = false\n    },\n\n    /**\n     * @description 初始化数字\n     */\n    initNum () {\n      console.log('初始化数字...')\n      /**\n       * @description X格长度\n       * @type {number}\n       */\n      const borderX = this.minesArray.length\n\n      /**\n       * @description Y格长度\n       * @type {number}\n       */\n      const borderY = this.minesArray[0].length\n\n      for (let row = 0; row < this.minesArray.length; row++) {\n        for (let col = 0; col < this.minesArray[row].length; col++) {\n          // 如果是雷，雷周围 8 个格子除了地雷数字加 1\n          if (this.minesArray[row][col] === -1) {\n            posArr.forEach((pos) => {\n              console.log('pos', pos)\n              console.log('row', row)\n              console.log('col', col)\n              // X=其余8个格子X坐标+随机生成的地雷X坐标\n              const x = pos[0] + row\n              // Y=其余8个格子Y坐标+随机生成的地雷Y坐标\n              const y = pos[1] + col\n              if (x < borderX && x >= 0 && y < borderY && y >= 0) {\n                if (this.minesArray[x][y] !== -1) {\n                  this.minesArray[x][y]++\n                }\n              }\n            })\n          }\n        }\n      }\n    }\n\n  },\n  filters: {\n    timeFilter (val) {\n      return Number(val).toFixed(1)\n    },\n\n    /**\n     * @description 消除数字0\n     * @param val 格子数字\n     * @returns {string|*}\n     */\n    cellFilter (val) {\n      return val === 0 ? '' : val\n    }\n  }\n\n}\n</script>\n\n<style>\n@import \"./assets/style/Index.css\";\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}