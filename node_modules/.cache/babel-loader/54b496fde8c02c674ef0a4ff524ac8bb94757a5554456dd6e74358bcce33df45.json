{"ast":null,"code":"/**\n * @description 九宫格数组其中除开点击的[0,0]坐标以外的八个格子\n * @type {number[][]}\n */\nconst posArr = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\nexport default {\n  name: 'App',\n  data() {\n    return {\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      isFirstClick: true,\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      isGameOver: false,\n      /**\n       * @description 数组\n       */\n      minesArray: null,\n      /**\n       * @description 行数\n       */\n      rowSize: 8,\n      /**\n       * @description 列数\n       */\n      colSize: 8,\n      /**\n       * @description 地雷数量\n       */\n      mineSize: 9,\n      /**\n       * @description 按键\n       */\n      btnContent: 'Start',\n      /**\n       * @description 剩余地雷\n       */\n      remainMines: '',\n      /**\n       * @description 安全格子数量\n       */\n      noMineBlocks: '',\n      /**\n       * @description 计时累加\n       */\n      time: 0.0,\n      /**\n       * @description 计时\n       */\n      timer: '',\n      /**\n       * @description 难度\n       */\n      difficulty: 'easy',\n      visited: null,\n      flag: 0,\n      flagType: null\n    };\n  },\n  mounted() {\n    // 初始化游戏\n    console.log('-----------------------');\n    console.log('初始化游戏中...');\n    this.minesArray = [];\n    this.visited = [];\n    for (let i = 0; i < this.rowSize; i++) {\n      this.minesArray[i] = [];\n      this.visited[i] = [];\n      for (let j = 0; j < this.colSize; j++) {\n        this.minesArray[i][j] = 0;\n        this.visited[i][j] = false;\n      }\n    }\n    console.log('游戏初始化完成');\n    console.log('-----------------------');\n  },\n  methods: {\n    /**\n     * @description 第一次点击格子\n     * @param row 点击的X坐标\n     * @param col 点击的Y坐标\n     */\n    clickCell(row, col) {\n      if (this.visited[row][col] || this.isGameOver) {\n        return;\n      }\n      if (this.isFirstClick) {\n        this.noMineBlocks = this.colSize * this.rowSize - this.mineSize;\n        this.initMines(row, col);\n        this.timeStart();\n      }\n      this.visited[row][col] = true;\n      this.$set(this.visited, row, [...this.visited[row]]);\n      const cell = this.minesArray[row][col];\n      if (cell === -1) {\n        // 踩雷了，爆炸\n        this.fail();\n        return;\n      }\n      if (--this.noMineBlocks === 0) {\n        //  安全格子全部点完，起飞\n        this.success();\n        return;\n      }\n      if (cell === 0) {\n        // 踩空了\n        this.search(row, col);\n      }\n    },\n    /**\n     * @description  传入第一次点击的坐标\n     * @param row 第一次点击的X坐标\n     * @param col 第一次点击的Y坐标\n     */\n    initMines(row, col) {\n      console.log('-----------------------');\n      console.log('初始化地雷...');\n      // 地雷设为 -1\n      for (let i = 0; i < this.mineSize; i++) {\n        do {\n          var mineRow = Math.floor(Math.random() * this.rowSize);\n          var mineCol = Math.floor(Math.random() * this.colSize);\n        } while (mineRow === row && mineCol === col || this.minesArray[mineRow][mineCol] === -1);\n        this.minesArray[mineRow][mineCol] = -1;\n        this.$set(this.minesArray, mineRow, [...this.minesArray[mineRow]]);\n      }\n      // 初始化数字\n      this.initNum();\n      console.log('初始化地雷完成...');\n      console.log('-----------------------');\n      const borderX = this.minesArray.length;\n      const borderY = this.minesArray[0].length;\n      for (let i = 0; i < this.minesArray.length; i++) {\n        for (let j = 0; j < this.minesArray[i].length; j++) {\n          // 如果是雷，雷周围 8 个格子除了地雷数字加 1\n          if (this.minesArray[i][j] === -1) {\n            posArr.forEach(pos => {\n              const x = pos[0] + i;\n              const y = pos[1] + j;\n              if (x < borderX && x >= 0 && y < borderY && y >= 0) {\n                if (this.minesArray[x][y] !== -1) {\n                  this.minesArray[x][y]++;\n                }\n              }\n            });\n          }\n        }\n      }\n      this.isFirstClick = false;\n    },\n    /**\n     * @description 踩空后进行搜索，查询周围格子数字\n     * @param r  X\n     * @param c  Y\n     */\n    search(r, c) {\n      posArr.forEach(pos => {\n        const x = pos[0] + r;\n        const y = pos[1] + c;\n        if (x < this.visited.length && x >= 0 && y < this.visited[0].length && y >= 0 && !this.visited[x][y]) {\n          // 若未访问过\n          this.clickCell(x, y);\n        }\n      });\n    },\n    /**\n     * @description 失败结局\n     */\n    fail() {\n      this.timeStop();\n      this.isGameOver = true;\n      this.btnContent = 'Fail';\n      this.showMines(false);\n    },\n    /**\n     * @description 胜利结局\n     */\n    success() {\n      this.timeStop();\n      this.isGameOver = true;\n      this.btnContent = 'Success';\n      this.showMines(true);\n    },\n    /**\n     * @description 游戏结束\n     */\n    gameover() {},\n    /**\n     * @description 结束时显示地雷\n     * @param isSuccess 是否成功\n     */\n    showMines(isSuccess) {\n      for (let i = 0; i < this.minesArray.length; i++) {\n        for (let j = 0; j < this.minesArray[0].length; j++) {\n          if (this.minesArray[i][j] === -1) {\n            if (isSuccess) {\n              this.minesArray[i][j] = -2; // 插旗\n            }\n\n            this.$set(this.minesArray, i, [...this.minesArray[i]]);\n            this.visited[i][j] = true;\n          }\n        }\n      }\n    },\n    /**\n     * @description 重新开始\n     */\n    onRestartBtnClick() {\n      this.timeStop();\n    },\n    /**\n     * @description 重新开始\n     */\n    restart() {\n      this.timeStop();\n      this.isFirstClick = true;\n      this.isGameOver = false;\n      this.btnContent = 'Restart';\n      this.timer = '';\n      this.time = 0.0;\n      this.initCells();\n      this.initVisited();\n    },\n    initCells() {\n      console.log('-----------------------');\n      console.log('初始化方格...');\n      for (let i = 0; i < this.rowSize; i++) {\n        for (let j = 0; j < this.colSize; j++) {\n          this.minesArray[i][j] = 0;\n          this.$set(this.minesArray, i, [...this.minesArray[i]]);\n        }\n      }\n      console.log('初始化方格结束');\n      console.log('-----------------------');\n    },\n    initVisited() {\n      for (let i = 0; i < this.rowSize; i++) {\n        for (let j = 0; j < this.colSize; j++) {\n          this.visited[i][j] = false;\n          this.$set(this.visited, i, [...this.visited[i]]);\n        }\n      }\n    },\n    /**\n     * @description 初始化数字\n     */\n    initNum() {},\n    /**\n     * @description 插旗\n     */\n    setFlag(cell) {\n      cell.isFlagged = !cell.isFlagged;\n      if (cell.isFlagged) {\n        this.remainMines--;\n      } else {\n        this.remainMines++;\n      }\n    },\n    /**\n     * @description 计时开始\n     */\n    timeStart() {\n      this.timer = setInterval(() => {\n        this.time += 0.1;\n      }, 100);\n    },\n    /**\n     * @description 计时停止\n     */\n    timeStop() {\n      clearInterval(this.timer);\n    },\n    /**\n     * @description 选择难度\n     */\n    changeDifficulty() {\n      switch (this.difficulty) {\n        case 'easy':\n          {\n            this.rowSize = 8;\n            this.colSize = 8;\n            this.mineSize = 10;\n            break;\n          }\n        case 'normal':\n          {\n            this.rowSize = 16;\n            this.colSize = 16;\n            this.mineSize = 40;\n            break;\n          }\n        case 'hard':\n          {\n            this.rowSize = 16;\n            this.colSize = 30;\n            this.mineSize = 99;\n            break;\n          }\n      }\n      this.initGame();\n    },\n    /**\n     * @description 右键事件\n     * @param e\n     * @param m X\n     * @param n Y\n     */\n    rightClick(e, m, n) {\n      // 鼠标右击触发事件\n      const eee = e;\n      let flagType = this.flagType;\n      eee.target.innerHTML = flagType;\n      console.log('第1111次', flagType);\n      if (flagType === null) {\n        eee.target.innerHTML = flagType;\n        eee.target.innerHTML = '旗';\n        flagType = '旗';\n      } else if (flagType === '旗') {\n        eee.target.innerHTML = flagType;\n        flagType = '?';\n      } else if (flagType === '?') {\n        eee.target.innerHTML = flagType;\n        flagType = null;\n      }\n      console.log('第er次', eee.flagType);\n\n      // eee.flagType === null ? '旗' :\n      //   eee.flagType === '旗' ? eee.flagType === '?' : eee.flagType === null\n      if (!(eee !== e)) {\n        this.flag += 1;\n        this.mineSize -= 1;\n      }\n      if (this.flag === this.mineSize || this.noMineBlocks === this.mineSize) {\n        this.success();\n      }\n      console.log('eeee', this.flag);\n    }\n  },\n  filters: {\n    /**\n     * @description  时间过滤\n     * @param val\n     * @returns {string}\n     */\n    timeFilter(val) {\n      return Number(val).toFixed(1);\n    },\n    /**\n     * @description 设置空格\n     * @param val 格子数字\n     * @returns {string|*}\n     */\n    cellFilter(val) {\n      if (val === 0) {\n        return '';\n      } else if (val === -1) {\n        return '炸';\n      } else if (val === -2) {\n        return '弹';\n      } else {\n        return val;\n      }\n      // return val === 0 ? '' : val\n    }\n  }\n};","map":{"version":3,"mappings":"AAkCA;AACA;AACA;AACA;AACA,gBACA,UACA,SACA,SACA,QACA,QACA,QACA,SACA,QACA;AACA;EACAA;EAEAC;IACA;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MAEAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;IACAC;IACAA;IACA;IACA;IACA;MACA;MACA;MACA;QACA;QACA;MACA;IACA;IACAA;IACAA;EACA;EACAC;IACA;AACA;AACA;AACA;AACA;IACAC;MACA;QACA;MACA;MACA;QACA;QACA;QACA;MACA;MACA;MACA;MAEA;MACA;QACA;QACA;QACA;MACA;MACA;QACA;QACA;QACA;MACA;MACA;QACA;QACA;MACA;IACA;IAEA;AACA;AACA;AACA;AACA;IACAC;MACAH;MACAA;MACA;MACA;QACA;UACA;UACA;QACA,SACAI,sCACA;QACA;QACA;MACA;MACA;MACA;MACAJ;MACAA;MACA;MACA;MACA;QACA;UACA;UACA;YACAK;cACA;cACA;cACA;gBACA;kBACA;gBACA;cACA;YACA;UACA;QACA;MACA;MAEA;IACA;IACA;AACA;AACA;AACA;AACA;IACAC;MACAD;QACA;QACA;QACA,IACAE,2BACAA,UACAC,8BACAA,UACA,qBACA;UACA;UACA;QACA;MACA;IACA;IAEA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;IACA;IAEA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;IACA;IAEA;AACA;AACA;IACAC,YAEA;IAEA;AACA;AACA;AACA;IACAC;MACA;QACA;UACA;YACA;cACA;YACA;;YACA;YAEA;UACA;QACA;MACA;IACA;IAEA;AACA;AACA;IACAC;MACA;IACA;IAEA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACAf;MACAA;MACA;QACA;UACA;UACA;QACA;MACA;MACAA;MACAA;IACA;IACAgB;MACA;QACA;UACA;UACA;QACA;MACA;IACA;IAEA;AACA;AACA;IACAC,WAEA;IAEA;AACA;AACA;IACAC;MACAC;MACA;QACA;MACA;QACA;MACA;IACA;IACA;AACA;AACA;IACAC;MACA;QACA;MACA;IACA;IAEA;AACA;AACA;IACAC;MACAC;IACA;IACA;AACA;AACA;IACAC;MACA;QACA;UAAA;YACA;YACA;YACA;YACA;UACA;QACA;UAAA;YACA;YACA;YACA;YACA;UACA;QACA;UAAA;YACA;YACA;YACA;YACA;UACA;MAAA;MAEA;IACA;IAEA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;MACA;MACAC;MACAzB;MACA;QACAyB;QACAA;QACA3B;MACA,WACAA;QACA2B;QACA3B;MACA;QACA2B;QACA3B;MACA;MACAE;;MAEA;MACA;MACA;QACA;QACA;MACA;MACA;QACA;MACA;MACAA;IACA;EACA;EACA0B;IACA;AACA;AACA;AACA;AACA;IACAC;MACA;IACA;IACA;AACA;AACA;AACA;AACA;IACAC;MACA;QACA;MACA;QACA;MACA;QACA;MACA;QACA;MACA;MACA;IACA;EACA;AAEA","names":["name","data","isFirstClick","isGameOver","minesArray","rowSize","colSize","mineSize","btnContent","remainMines","noMineBlocks","time","timer","difficulty","visited","flag","flagType","mounted","console","methods","clickCell","initMines","mineRow","posArr","search","x","y","fail","success","gameover","showMines","onRestartBtnClick","restart","initCells","initVisited","initNum","setFlag","cell","timeStart","timeStop","clearInterval","changeDifficulty","rightClick","eee","filters","timeFilter","cellFilter"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"main-area\">\n\n      <div style=\"text-align:center\" class=\"top-box\">\n        <div class=\"top-box-item remain-mines show-number\">\n          {{ mineSize }}\n        </div>\n        <button @click=\"restart\" class=\"restart-btn top-box-item\">\n          {{ btnContent }}\n        </button>\n        <div class=\"top-box-item time show-number\"> {{ time | timeFilter }}</div>\n      </div>\n      <div class=\"game-area\">\n        <div v-for=\"(rowArr,m) in minesArray\" :key=\"m\" class=\"row-cells\">\n          <div\n            v-for=\"(cell,n) in rowArr\"\n            :key=\"n\" class=\"cell\"\n            @click=\"clickCell(m,n)\"\n            @contextmenu.prevent=\"rightClick($event,m,n)\"\n          >\n            <div :class=\"['num-color-'+minesArray[m][n], 'num-color' ]\">\n              {{ cell | cellFilter }}\n            </div>\n            <div :class=\"['mask', {visited: visited[m][n]}]\">{{ flagType }}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\n/**\n * @description 九宫格数组其中除开点击的[0,0]坐标以外的八个格子\n * @type {number[][]}\n */\nconst posArr = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1]\n]\nexport default {\n  name: 'App',\n\n  data () {\n    return {\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      isFirstClick: true,\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      isGameOver: false,\n      /**\n       * @description 数组\n       */\n      minesArray: null,\n      /**\n       * @description 行数\n       */\n      rowSize: 8,\n      /**\n       * @description 列数\n       */\n      colSize: 8,\n      /**\n       * @description 地雷数量\n       */\n      mineSize: 9,\n      /**\n       * @description 按键\n       */\n      btnContent: 'Start',\n      /**\n       * @description 剩余地雷\n       */\n      remainMines: '',\n      /**\n       * @description 安全格子数量\n       */\n      noMineBlocks: '',\n      /**\n       * @description 计时累加\n       */\n      time: 0.0,\n      /**\n       * @description 计时\n       */\n      timer: '',\n      /**\n       * @description 难度\n       */\n      difficulty: 'easy',\n\n      visited: null,\n      flag: 0,\n      flagType: null\n    }\n  },\n  mounted () {\n    // 初始化游戏\n    console.log('-----------------------')\n    console.log('初始化游戏中...')\n    this.minesArray = []\n    this.visited = []\n    for (let i = 0; i < this.rowSize; i++) {\n      this.minesArray[i] = []\n      this.visited[i] = []\n      for (let j = 0; j < this.colSize; j++) {\n        this.minesArray[i][j] = 0\n        this.visited[i][j] = false\n      }\n    }\n    console.log('游戏初始化完成')\n    console.log('-----------------------')\n  },\n  methods: {\n    /**\n     * @description 第一次点击格子\n     * @param row 点击的X坐标\n     * @param col 点击的Y坐标\n     */\n    clickCell (row, col) {\n      if (this.visited[row][col] || this.isGameOver) {\n        return\n      }\n      if (this.isFirstClick) {\n        this.noMineBlocks = this.colSize * this.rowSize - this.mineSize\n        this.initMines(row, col)\n        this.timeStart()\n      }\n      this.visited[row][col] = true\n      this.$set(this.visited, row, [...this.visited[row]])\n\n      const cell = this.minesArray[row][col]\n      if (cell === -1) {\n        // 踩雷了，爆炸\n        this.fail()\n        return\n      }\n      if (--this.noMineBlocks === 0) {\n        //  安全格子全部点完，起飞\n        this.success()\n        return\n      }\n      if (cell === 0) {\n        // 踩空了\n        this.search(row, col)\n      }\n    },\n\n    /**\n     * @description  传入第一次点击的坐标\n     * @param row 第一次点击的X坐标\n     * @param col 第一次点击的Y坐标\n     */\n    initMines (row, col) {\n      console.log('-----------------------')\n      console.log('初始化地雷...')\n      // 地雷设为 -1\n      for (let i = 0; i < this.mineSize; i++) {\n        do {\n          var mineRow = Math.floor(Math.random() * this.rowSize)\n          var mineCol = Math.floor(Math.random() * this.colSize)\n        } while (\n          (mineRow === row && mineCol === col) ||\n          this.minesArray[mineRow][mineCol] === -1)\n        this.minesArray[mineRow][mineCol] = -1\n        this.$set(this.minesArray, mineRow, [...this.minesArray[mineRow]])\n      }\n      // 初始化数字\n      this.initNum()\n      console.log('初始化地雷完成...')\n      console.log('-----------------------')\n      const borderX = this.minesArray.length\n      const borderY = this.minesArray[0].length\n      for (let i = 0; i < this.minesArray.length; i++) {\n        for (let j = 0; j < this.minesArray[i].length; j++) {\n          // 如果是雷，雷周围 8 个格子除了地雷数字加 1\n          if (this.minesArray[i][j] === -1) {\n            posArr.forEach((pos) => {\n              const x = pos[0] + i\n              const y = pos[1] + j\n              if (x < borderX && x >= 0 && y < borderY && y >= 0) {\n                if (this.minesArray[x][y] !== -1) {\n                  this.minesArray[x][y]++\n                }\n              }\n            })\n          }\n        }\n      }\n\n      this.isFirstClick = false\n    },\n    /**\n     * @description 踩空后进行搜索，查询周围格子数字\n     * @param r  X\n     * @param c  Y\n     */\n    search (r, c) {\n      posArr.forEach((pos) => {\n        const x = pos[0] + r\n        const y = pos[1] + c\n        if (\n          x < this.visited.length &&\n          x >= 0 &&\n          y < this.visited[0].length &&\n          y >= 0 &&\n          !this.visited[x][y]\n        ) {\n          // 若未访问过\n          this.clickCell(x, y)\n        }\n      })\n    },\n\n    /**\n     * @description 失败结局\n     */\n    fail () {\n      this.timeStop()\n      this.isGameOver = true\n      this.btnContent = 'Fail'\n      this.showMines(false)\n    },\n\n    /**\n     * @description 胜利结局\n     */\n    success () {\n      this.timeStop()\n      this.isGameOver = true\n      this.btnContent = 'Success'\n      this.showMines(true)\n    },\n\n    /**\n     * @description 游戏结束\n     */\n    gameover () {\n\n    },\n\n    /**\n     * @description 结束时显示地雷\n     * @param isSuccess 是否成功\n     */\n    showMines (isSuccess) {\n      for (let i = 0; i < this.minesArray.length; i++) {\n        for (let j = 0; j < this.minesArray[0].length; j++) {\n          if (this.minesArray[i][j] === -1) {\n            if (isSuccess) {\n              this.minesArray[i][j] = -2 // 插旗\n            }\n            this.$set(this.minesArray, i, [...this.minesArray[i]])\n\n            this.visited[i][j] = true\n          }\n        }\n      }\n    },\n\n    /**\n     * @description 重新开始\n     */\n    onRestartBtnClick () {\n      this.timeStop()\n    },\n\n    /**\n     * @description 重新开始\n     */\n    restart () {\n      this.timeStop()\n      this.isFirstClick = true\n      this.isGameOver = false\n      this.btnContent = 'Restart'\n      this.timer = ''\n      this.time = 0.0\n      this.initCells()\n      this.initVisited()\n    },\n\n    initCells () {\n      console.log('-----------------------')\n      console.log('初始化方格...')\n      for (let i = 0; i < this.rowSize; i++) {\n        for (let j = 0; j < this.colSize; j++) {\n          this.minesArray[i][j] = 0\n          this.$set(this.minesArray, i, [...this.minesArray[i]])\n        }\n      }\n      console.log('初始化方格结束')\n      console.log('-----------------------')\n    },\n    initVisited () {\n      for (let i = 0; i < this.rowSize; i++) {\n        for (let j = 0; j < this.colSize; j++) {\n          this.visited[i][j] = false\n          this.$set(this.visited, i, [...this.visited[i]])\n        }\n      }\n    },\n\n    /**\n     * @description 初始化数字\n     */\n    initNum () {\n\n    },\n\n    /**\n     * @description 插旗\n     */\n    setFlag (cell) {\n      cell.isFlagged = !cell.isFlagged\n      if (cell.isFlagged) {\n        this.remainMines--\n      } else {\n        this.remainMines++\n      }\n    },\n    /**\n     * @description 计时开始\n     */\n    timeStart () {\n      this.timer = setInterval(() => {\n        this.time += 0.1\n      }, 100)\n    },\n\n    /**\n     * @description 计时停止\n     */\n    timeStop () {\n      clearInterval(this.timer)\n    },\n    /**\n     * @description 选择难度\n     */\n    changeDifficulty () {\n      switch (this.difficulty) {\n        case 'easy': {\n          this.rowSize = 8\n          this.colSize = 8\n          this.mineSize = 10\n          break\n        }\n        case 'normal': {\n          this.rowSize = 16\n          this.colSize = 16\n          this.mineSize = 40\n          break\n        }\n        case 'hard': {\n          this.rowSize = 16\n          this.colSize = 30\n          this.mineSize = 99\n          break\n        }\n      }\n      this.initGame()\n    },\n\n    /**\n     * @description 右键事件\n     * @param e\n     * @param m X\n     * @param n Y\n     */\n    rightClick (e, m, n) {\n      // 鼠标右击触发事件\n      const eee = e\n      let flagType = this.flagType\n      eee.target.innerHTML = flagType\n      console.log('第1111次', flagType)\n      if (flagType === null) {\n        eee.target.innerHTML = flagType\n        eee.target.innerHTML = '旗'\n        flagType = '旗'\n      } else if\n      (flagType === '旗') {\n        eee.target.innerHTML = flagType\n        flagType = '?'\n      } else if (flagType === '?') {\n        eee.target.innerHTML = flagType\n        flagType = null\n      }\n      console.log('第er次', eee.flagType)\n\n      // eee.flagType === null ? '旗' :\n      //   eee.flagType === '旗' ? eee.flagType === '?' : eee.flagType === null\n      if (!(eee !== e)) {\n        this.flag += 1\n        this.mineSize -= 1\n      }\n      if (this.flag === this.mineSize || this.noMineBlocks === this.mineSize) {\n        this.success()\n      }\n      console.log('eeee', this.flag)\n    }\n  },\n  filters: {\n    /**\n     * @description  时间过滤\n     * @param val\n     * @returns {string}\n     */\n    timeFilter (val) {\n      return Number(val).toFixed(1)\n    },\n    /**\n     * @description 设置空格\n     * @param val 格子数字\n     * @returns {string|*}\n     */\n    cellFilter (val) {\n      if (val === 0) {\n        return ''\n      } else if (val === -1) {\n        return '炸'\n      } else if (val === -2) {\n        return '弹'\n      } else {\n        return val\n      }\n      // return val === 0 ? '' : val\n    }\n  }\n\n}\n</script>\n\n<style>\n@import \"./assets/style/Index.css\";\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}