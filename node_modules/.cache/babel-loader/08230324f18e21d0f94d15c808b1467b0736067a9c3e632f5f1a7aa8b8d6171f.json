{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @description 九宫格数组其中除开点击的[0,0]坐标以外的八个格子\n * @type {number[][]}\n */\nconst posArr = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n\n/**\n * @description 111\n */\nclass Cell {\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n    this.isVisited = false;\n    this.isFlagged = false;\n    this.cell = '';\n    this.val = 0;\n    this.neighbors = [];\n  }\n}\nexport default {\n  name: 'App',\n  components: {\n    // MineClearing\n  },\n  data() {\n    return {\n      Cell,\n      cellMatrix: '',\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      posArr,\n      isGameOver: false,\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      isFirstClick: true,\n      /**\n       * @description 格子数组\n       */\n      minesArray: [],\n      /**\n       * @description 行数\n       */\n      rowSize: 8,\n      /**\n       * @description 列数\n       */\n      colSize: 8,\n      /**\n       * @description 地雷数量\n       */\n      mineSize: 9,\n      /**\n       * @description 表情包\n       */\n      btnContent: 'Start',\n      /**\n       * @description 数字显示隐藏\n       */\n      visited: null,\n      /**\n       * @description 安全格子数量\n       */\n      noMineBlocks: '',\n      /**\n       * @description 计时累加\n       */\n      time: 0.0,\n      /**\n       * @description 计时\n       */\n      timer: '',\n      /**\n       * @description 111\n       */\n      textTip: ''\n    };\n  },\n  mounted() {\n    this.initGame();\n    // 初始化游戏\n    console.log('-----------------------');\n    console.log('初始化游戏中...');\n    this.minesArray = [];\n    this.visited = [];\n    // X循环\n    for (let row = 0; row < this.rowSize; row++) {\n      this.minesArray[row] = [];\n      this.visited[row] = [];\n      // Y循环\n      for (let col = 0; col < this.colSize; col++) {\n        this.minesArray[row][col] = 0;\n        this.visited[row][col] = false;\n      }\n    }\n    console.log('游戏初始化完成');\n    console.log('-----------------------');\n  },\n  methods: {\n    initGame() {\n      this.isFirstClick = true;\n      this.isGameOver = false;\n      if (this.timer) {\n        this.timeStop();\n      }\n      this.timer = '';\n      this.time = 0.0;\n      this.remainMines = this.mineSize;\n\n      // 初始化二维数组\n      this.cellMatrix = [];\n      for (let row = 0; row < this.rowSize; row++) {\n        this.cellMatrix.push([]);\n        for (let col = 0; col < this.colSize; col++) {\n          this.cellMatrix[row].push(new Cell(row, col));\n        }\n      }\n\n      // 把 '邻居们' 存进来\n      this.cellMatrix.forEach(rowArr => {\n        rowArr.forEach(cell => {\n          posArr.forEach(p => {\n            const x = p[0] + cell.row;\n            const y = p[1] + cell.col;\n            if (x >= 0 && x < this.rowSize && y >= 0 && y < this.colSize) {\n              cell.neighbors.push(this.getCell(x, y));\n            }\n          });\n        });\n      });\n    },\n    getCell(r, c) {\n      /* 为了解放双手 */\n      return this.cellMatrix[r][c];\n    },\n    /**\n     * @description 第一次点击格子\n     * @param cell 点击的X坐标\n     */\n    clickCell(cell) {\n      if (cell.isVisited && this.isGameOver) {\n        return;\n      }\n      if (this.isFirstClick) {\n        this.noMineBlocks = this.colSize * this.rowSize - this.mineSize;\n        this.initMines(cell.row, cell.col);\n        this.timeStart();\n      }\n      cell.isVisited = true;\n      if (cell.val === -1) {\n        // 踩雷了，爆炸\n        cell.isClickedBoom = true;\n        this.fail();\n        return;\n      }\n      if (cell.val === 0) {\n        // 踩空了\n        this.search(cell);\n      } else {\n        cell.cell = cell.val;\n      }\n\n      // 注意这个，判断胜利的位置放到了最后\n      if (--this.noMineBlocks === 0) {\n        this.success();\n        return;\n      }\n    },\n    /**\n     * @description 踩空后进行搜索，查询周围格子数字\n     * @param cell\n     */\n    search(cell) {\n      /* 因为有了 neighbors，代码简化了许多 */\n      cell.neighbors.forEach(neighbor => {\n        this.clickCell(neighbor);\n      });\n    },\n    /**\n     * @description 结束时显示地雷\n     * @param isSuccess 是否成功\n     */\n    showMines(isSuccess) {\n      this.mines.forEach(cell => {\n        if (isSuccess) {\n          // cell.isFlagged = true;\n          cell.val = -2;\n        } else {\n          // if (!cell.isFlagged) cell.isVisited = true;\n          cell.isVisited = true;\n        }\n      });\n    },\n    /** ------------------------------------------------------------------------ */\n    /** ------------------------------------------------------------------------ */\n    /**\n     * @description 重新开始\n     */\n    restart() {\n      console.log('重新开始');\n      this.isFirstClick = true;\n      this.isGameOver = false;\n      this.textTip = '';\n      this.initCells();\n      this.initVisited();\n    },\n    /**\n     * @description 重新开始\n     */\n    onRestartBtnClick() {\n      // 将 restart 单独提了出来，按钮绑定的是这个\n      this.btnContent = 'Start';\n      this.restart();\n    },\n    /**\n     * @description 初始化格子\n     */\n    initCells() {\n      console.log('-----------------------');\n      console.log('初始化方格...');\n      for (let row = 0; row < this.rowSize; row++) {\n        for (let col = 0; col < this.colSize; col++) {\n          this.minesArray[row][col] = 0;\n          this.$set(this.minesArray, row, [...this.minesArray[row]]);\n        }\n      }\n      console.log('初始化方格结束');\n      console.log('-----------------------');\n    },\n    /**\n     * @description 初始化格子显示\n     */\n    initVisited() {\n      for (let row = 0; row < this.rowSize; row++) {\n        for (let col = 0; col < this.colSize; col++) {\n          this.visited[row][col] = false;\n          this.$set(this.visited, row, [...this.visited[row]]);\n        }\n      }\n    },\n    /**\n     * @description 胜利结局\n     */\n    success() {\n      this.timeStop();\n      this.isGameOver = true;\n      this.btnContent = 'HappyEnding';\n      this.showMines(true);\n    },\n    /**\n     * @description 失败结局\n     */\n    fail() {\n      this.timeStop();\n      this.isGameOver = true;\n      this.btnContent = 'BadEnding';\n      this.showMines(false);\n    },\n    /**\n     * @description  传入第一次点击的坐标\n     * @param row 第一次点击的X坐标\n     * @param col 第一次点击的Y坐标\n     */\n    initMines(row, col) {\n      console.log('-----------------------');\n      console.log('初始化地雷...');\n\n      // 地雷设为 -1\n      for (let i = 0; i < this.mineSize; i++) {\n        do {\n          // 生成行/列随机数\n\n          /**\n           * @des 雷X坐标\n           * @type {number}\n           */\n          var mineRow = Math.floor(Math.random() * this.rowSize);\n          /**\n           * @des 雷Y坐标\n           * @type {number}\n           */\n          var mineCol = Math.floor(Math.random() * this.colSize);\n        } while (\n        //  防止与第一次点击坐标重复\n        mineRow === row && mineCol === col ||\n        //  防止地雷坐标重复\n        this.minesArray[mineRow][mineCol] === -1);\n        console.log('点击地雷随机生成的坐标', mineRow, ',', mineCol);\n        this.minesArray[mineRow][mineCol] = -1;\n        this.$set(this.minesArray, mineRow, [...this.minesArray[mineRow]]);\n      }\n      // 初始化数字\n      this.initNum();\n      console.log('初始化地雷完成...');\n      console.log('-----------------------');\n      this.isFirstClick = false;\n    },\n    /**\n     * @description 初始化数字\n     */\n    initNum() {\n      console.log('初始化数字...');\n      /**\n       * @description X格长度\n       * @type {number}\n       */\n      const borderX = this.minesArray.length;\n\n      /**\n       * @description Y格长度\n       * @type {number}\n       */\n      const borderY = this.minesArray[0].length;\n      for (let row = 0; row < this.minesArray.length; row++) {\n        for (let col = 0; col < this.minesArray[row].length; col++) {\n          // 如果是雷，雷周围 8 个格子除了地雷数字加 1\n          if (this.minesArray[row][col] === -1) {\n            posArr.forEach(pos => {\n              // console.log('pos', pos)\n              // console.log('row', row)\n              // console.log('col', col)\n              // X=其余8个格子X坐标+随机生成的地雷X坐标\n              const x = pos[0] + row;\n              // Y=其余8个格子Y坐标+随机生成的地雷Y坐标\n              const y = pos[1] + col;\n              if (x < borderX && x >= 0 && y < borderY && y >= 0) {\n                if (this.minesArray[x][y] !== -1) {\n                  this.minesArray[x][y]++;\n                }\n              }\n            });\n          }\n        }\n      }\n    },\n    /**\n     * @description 踩空后进行搜索，查询周围格子数字\n     * @param row\n     * @param col\n     */\n\n    /**\n     * @description 计时开始\n     */\n    timeStart() {\n      this.timer = setInterval(() => {\n        this.time += 0.1;\n      }, 100);\n    },\n    /**\n     * @description 计时停止\n     */\n    timeStop() {\n      clearInterval(this.timer);\n    }\n  },\n  filters: {\n    /**\n     * @description  时间过滤\n     * @param val\n     * @returns {string}\n     */\n    timeFilter(val) {\n      return Number(val).toFixed(1);\n    },\n    /**\n     * @description 设置空格\n     * @param val 格子数字\n     * @returns {string|*}\n     */\n    cellFilter(val) {\n      return val === 0 ? '' : val;\n    }\n  }\n};","map":{"version":3,"mappings":";AA6BA;AACA;AACA;AACA;AACA,gBACA,UACA,SACA,SACA,QACA,QACA,QACA,SACA,QACA;;AAEA;AACA;AACA;AACA;EACAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;AACA;AACA;EACAC;EACAC;IACA;EAAA,CACA;EACAC;IACA;MACAC;MACAC;MACA;AACA;AACA;MACAC;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;MACA;AACA;AACA;MACAC;MAEA;AACA;AACA;MACAC;IACA;EACA;EACAC;IACA;IACA;IACAC;IACAA;IACA;IACA;IACA;IACA;MACA;MACA;MACA;MACA;QACA;QACA;MACA;IACA;IAEAA;IACAA;EACA;EACAC;IACAC;MACA;MACA;MACA;QACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;QACA;QACA;UACA;QACA;MACA;;MAEA;MACA;QACAC;UACAjB;YACA;YACA;YACA;cACAkB;YACA;UACA;QACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACA;AACA;AACA;AACA;IACAC;MACA;QACA;MACA;MAEA;QACA;QACA;QACA;MACA;MAEAF;MAEA;QACA;QACAA;QACA;QACA;MACA;MAEA;QACA;QACA;MACA;QACAA;MACA;;MAEA;MACA;QACA;QACA;MACA;IACA;IACA;AACA;AACA;AACA;IACAG;MACA;MACAH;QACA;MACA;IACA;IACA;AACA;AACA;AACA;IACAI;MACA;QACA;UACA;UACAJ;QACA;UACA;UACAA;QACA;MACA;IACA;IAEA;IACA;IACA;AACA;AACA;IACAK;MACAT;MACA;MACA;MACA;MACA;MACA;IACA;IAEA;AACA;AACA;IACAU;MAAA;MACA;MACA;IACA;IACA;AACA;AACA;IACAC;MACAX;MACAA;MACA;QACA;UACA;UACA;QACA;MACA;MACAA;MACAA;IACA;IAEA;AACA;AACA;IACAY;MACA;QACA;UACA;UACA;QACA;MACA;IACA;IACA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;IACA;IAEA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;IACA;IAEA;AACA;AACA;AACA;AACA;IACAC;MACAf;MACAA;;MAEA;MACA;QACA;UACA;;UAEA;AACA;AACA;AACA;UACA;UACA;AACA;AACA;AACA;UACA;QACA;QACA;QACAgB;QACA;QACA;QAEAhB;QACA;QACA;MACA;MACA;MACA;MAEAA;MACAA;MAEA;IACA;IAEA;AACA;AACA;IACAiB;MACAjB;MACA;AACA;AACA;AACA;MACA;;MAEA;AACA;AACA;AACA;MACA;MAEA;QACA;UACA;UACA;YACAd;cACA;cACA;cACA;cACA;cACA;cACA;cACA;cACA;gBACA;kBACA;gBACA;cACA;YACA;UACA;QACA;MACA;IACA;IAEA;AACA;AACA;AACA;AACA;;IAEA;AACA;AACA;IACAgC;MACA;QACA;MACA;IACA;IACA;AACA;AACA;IACAC;MACAC;IACA;EAEA;EACAC;IACA;AACA;AACA;AACA;AACA;IACAC;MACA;IACA;IAEA;AACA;AACA;AACA;AACA;IACAC;MACA;IACA;EACA;AAEA","names":["constructor","name","components","data","Cell","cellMatrix","posArr","isGameOver","isFirstClick","minesArray","rowSize","colSize","mineSize","btnContent","visited","noMineBlocks","time","timer","textTip","mounted","console","methods","initGame","rowArr","cell","getCell","clickCell","search","showMines","restart","onRestartBtnClick","initCells","initVisited","success","fail","initMines","mineRow","initNum","timeStart","timeStop","clearInterval","filters","timeFilter","cellFilter"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"main-area\">\n\n      <div style=\"text-align:center\" class=\"top-box\">\n        <div class=\"top-box-item remain-mines show-number\">\n          1\n        </div>\n        <button @click=\"onRestartBtnClick\" class=\"restart-btn top-box-item\">\n          {{btnContent}}\n        </button>\n        <div class=\"top-box-item time show-number\"> {{ time | timeFilter}} </div>\n      </div>\n      <div class=\"game-area\">\n        <div v-for=\"(row,m) in minesArray\" :key=\"m\" class=\"row-cells\">\n          <div v-for=\"(cell,n) in row\" :key=\"n\" class=\"cell\" @click=\"clickCell(m,n)\">\n            <div :class=\"['num-color-'+minesArray[m][n], 'num-color', ]\">\n              {{  cell | cellFilter }}\n            </div>\n            <div :class=\"['mask', {visited: visited[m][n]}]\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\n/**\n * @description 九宫格数组其中除开点击的[0,0]坐标以外的八个格子\n * @type {number[][]}\n */\nconst posArr = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1]\n]\n\n/**\n * @description 111\n */\nclass Cell {\n  constructor (row, col) {\n    this.row = row\n    this.col = col\n    this.isVisited = false\n    this.isFlagged = false\n    this.cell = ''\n    this.val = 0\n    this.neighbors = []\n  }\n}\nexport default {\n  name: 'App',\n  components: {\n    // MineClearing\n  },\n  data () {\n    return {\n      Cell,\n      cellMatrix: '',\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      posArr,\n      isGameOver: false,\n\n      /**\n       * @description 每一局游戏第一次点击格子\n       */\n      isFirstClick: true,\n\n      /**\n       * @description 格子数组\n       */\n      minesArray: [],\n\n      /**\n       * @description 行数\n       */\n      rowSize: 8,\n\n      /**\n       * @description 列数\n       */\n      colSize: 8,\n\n      /**\n       * @description 地雷数量\n       */\n      mineSize: 9,\n\n      /**\n       * @description 表情包\n       */\n      btnContent: 'Start',\n\n      /**\n       * @description 数字显示隐藏\n       */\n      visited: null,\n\n      /**\n       * @description 安全格子数量\n       */\n      noMineBlocks: '',\n\n      /**\n       * @description 计时累加\n       */\n      time: 0.0,\n      /**\n       * @description 计时\n       */\n      timer: '',\n\n      /**\n       * @description 111\n       */\n      textTip: ''\n    }\n  },\n  mounted () {\n    this.initGame()\n    // 初始化游戏\n    console.log('-----------------------')\n    console.log('初始化游戏中...')\n    this.minesArray = []\n    this.visited = []\n    // X循环\n    for (let row = 0; row < this.rowSize; row++) {\n      this.minesArray[row] = []\n      this.visited[row] = []\n      // Y循环\n      for (let col = 0; col < this.colSize; col++) {\n        this.minesArray[row][col] = 0\n        this.visited[row][col] = false\n      }\n    }\n\n    console.log('游戏初始化完成')\n    console.log('-----------------------')\n  },\n  methods: {\n    initGame () {\n      this.isFirstClick = true\n      this.isGameOver = false\n      if (this.timer) {\n        this.timeStop()\n      }\n      this.timer = ''\n      this.time = 0.0\n      this.remainMines = this.mineSize\n\n      // 初始化二维数组\n      this.cellMatrix = []\n      for (let row = 0; row < this.rowSize; row++) {\n        this.cellMatrix.push([])\n        for (let col = 0; col < this.colSize; col++) {\n          this.cellMatrix[row].push(new Cell(row, col))\n        }\n      }\n\n      // 把 '邻居们' 存进来\n      this.cellMatrix.forEach((rowArr) => {\n        rowArr.forEach((cell) => {\n          posArr.forEach((p) => {\n            const x = p[0] + cell.row\n            const y = p[1] + cell.col\n            if (x >= 0 && x < this.rowSize && y >= 0 && y < this.colSize) {\n              cell.neighbors.push(this.getCell(x, y))\n            }\n          })\n        })\n      })\n    },\n    getCell(r, c) {\n      /* 为了解放双手 */\n      return this.cellMatrix[r][c]\n    },\n    /**\n     * @description 第一次点击格子\n     * @param cell 点击的X坐标\n     */\n    clickCell(cell) {\n      if (cell.isVisited && this.isGameOver) {\n        return\n      }\n\n      if (this.isFirstClick) {\n        this.noMineBlocks = this.colSize * this.rowSize - this.mineSize;\n        this.initMines(cell.row, cell.col);\n        this.timeStart();\n      }\n\n      cell.isVisited = true;\n\n      if (cell.val === -1) {\n        // 踩雷了，爆炸\n        cell.isClickedBoom = true;\n        this.fail();\n        return;\n      }\n\n      if (cell.val === 0) {\n        // 踩空了\n        this.search(cell);\n      } else {\n        cell.cell = cell.val;\n      }\n\n      // 注意这个，判断胜利的位置放到了最后\n      if (--this.noMineBlocks === 0) {\n        this.success();\n        return;\n      }\n    },\n    /**\n     * @description 踩空后进行搜索，查询周围格子数字\n     * @param cell\n     */\n    search (cell) {\n      /* 因为有了 neighbors，代码简化了许多 */\n      cell.neighbors.forEach((neighbor) => {\n        this.clickCell(neighbor);\n      });\n    },\n    /**\n     * @description 结束时显示地雷\n     * @param isSuccess 是否成功\n     */\n    showMines (isSuccess) {\n      this.mines.forEach((cell) => {\n        if (isSuccess) {\n          // cell.isFlagged = true;\n          cell.val = -2\n        } else {\n          // if (!cell.isFlagged) cell.isVisited = true;\n          cell.isVisited = true\n        }\n      })\n    },\n\n    /** ------------------------------------------------------------------------ */\n    /** ------------------------------------------------------------------------ */\n    /**\n     * @description 重新开始\n     */\n    restart () {\n      console.log('重新开始')\n      this.isFirstClick = true\n      this.isGameOver = false\n      this.textTip = ''\n      this.initCells()\n      this.initVisited()\n    },\n\n    /**\n     * @description 重新开始\n     */\n    onRestartBtnClick () { // 将 restart 单独提了出来，按钮绑定的是这个\n      this.btnContent = 'Start'\n      this.restart()\n    },\n    /**\n     * @description 初始化格子\n     */\n    initCells () {\n      console.log('-----------------------')\n      console.log('初始化方格...')\n      for (let row = 0; row < this.rowSize; row++) {\n        for (let col = 0; col < this.colSize; col++) {\n          this.minesArray[row][col] = 0\n          this.$set(this.minesArray, row, [...this.minesArray[row]])\n        }\n      }\n      console.log('初始化方格结束')\n      console.log('-----------------------')\n    },\n\n    /**\n     * @description 初始化格子显示\n     */\n    initVisited () {\n      for (let row = 0; row < this.rowSize; row++) {\n        for (let col = 0; col < this.colSize; col++) {\n          this.visited[row][col] = false\n          this.$set(this.visited, row, [...this.visited[row]])\n        }\n      }\n    },\n    /**\n     * @description 胜利结局\n     */\n    success () {\n      this.timeStop()\n      this.isGameOver = true\n      this.btnContent = 'HappyEnding'\n      this.showMines(true)\n    },\n\n    /**\n     * @description 失败结局\n     */\n    fail () {\n      this.timeStop()\n      this.isGameOver = true\n      this.btnContent = 'BadEnding'\n      this.showMines(false)\n    },\n\n    /**\n     * @description  传入第一次点击的坐标\n     * @param row 第一次点击的X坐标\n     * @param col 第一次点击的Y坐标\n     */\n    initMines (row, col) {\n      console.log('-----------------------')\n      console.log('初始化地雷...')\n\n      // 地雷设为 -1\n      for (let i = 0; i < this.mineSize; i++) {\n        do {\n          // 生成行/列随机数\n\n          /**\n           * @des 雷X坐标\n           * @type {number}\n           */\n          var mineRow = Math.floor(Math.random() * this.rowSize)\n          /**\n           * @des 雷Y坐标\n           * @type {number}\n           */\n          var mineCol = Math.floor(Math.random() * this.colSize)\n        } while (\n          //  防止与第一次点击坐标重复\n          (mineRow === row && mineCol === col) ||\n        //  防止地雷坐标重复\n        this.minesArray[mineRow][mineCol] === -1)\n\n        console.log('点击地雷随机生成的坐标', mineRow, ',', mineCol)\n        this.minesArray[mineRow][mineCol] = -1\n        this.$set(this.minesArray, mineRow, [...this.minesArray[mineRow]])\n      }\n      // 初始化数字\n      this.initNum()\n\n      console.log('初始化地雷完成...')\n      console.log('-----------------------')\n\n      this.isFirstClick = false\n    },\n\n    /**\n     * @description 初始化数字\n     */\n    initNum () {\n      console.log('初始化数字...')\n      /**\n       * @description X格长度\n       * @type {number}\n       */\n      const borderX = this.minesArray.length\n\n      /**\n       * @description Y格长度\n       * @type {number}\n       */\n      const borderY = this.minesArray[0].length\n\n      for (let row = 0; row < this.minesArray.length; row++) {\n        for (let col = 0; col < this.minesArray[row].length; col++) {\n          // 如果是雷，雷周围 8 个格子除了地雷数字加 1\n          if (this.minesArray[row][col] === -1) {\n            posArr.forEach((pos) => {\n              // console.log('pos', pos)\n              // console.log('row', row)\n              // console.log('col', col)\n              // X=其余8个格子X坐标+随机生成的地雷X坐标\n              const x = pos[0] + row\n              // Y=其余8个格子Y坐标+随机生成的地雷Y坐标\n              const y = pos[1] + col\n              if (x < borderX && x >= 0 && y < borderY && y >= 0) {\n                if (this.minesArray[x][y] !== -1) {\n                  this.minesArray[x][y]++\n                }\n              }\n            })\n          }\n        }\n      }\n    },\n\n    /**\n     * @description 踩空后进行搜索，查询周围格子数字\n     * @param row\n     * @param col\n     */\n\n    /**\n     * @description 计时开始\n     */\n    timeStart () {\n      this.timer = setInterval(() => {\n        this.time += 0.1\n      }, 100)\n    },\n    /**\n     * @description 计时停止\n     */\n    timeStop () {\n      clearInterval(this.timer)\n    }\n\n  },\n  filters: {\n    /**\n     * @description  时间过滤\n     * @param val\n     * @returns {string}\n     */\n    timeFilter (val) {\n      return Number(val).toFixed(1)\n    },\n\n    /**\n     * @description 设置空格\n     * @param val 格子数字\n     * @returns {string|*}\n     */\n    cellFilter (val) {\n      return val === 0 ? '' : val\n    }\n  }\n\n}\n</script>\n\n<style>\n@import \"./assets/style/Index.css\";\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}